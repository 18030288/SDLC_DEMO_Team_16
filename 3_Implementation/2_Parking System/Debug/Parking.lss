
Parking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000750  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067e  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a1  00000000  00000000  00000f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000123c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000392  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  000015f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000016a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
int main(void)
{
	
	uint16_t run = 1;
	
	DDRD = 0xFF; //0b11111111
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	
	DDRB &= 0xF9;
  84:	84 b1       	in	r24, 0x04	; 4
  86:	89 7f       	andi	r24, 0xF9	; 249
  88:	84 b9       	out	0x04, r24	; 4
	
	PORTB |= (1 << PORTB1) | (1 << PORTB2);
  8a:	85 b1       	in	r24, 0x05	; 5
  8c:	86 60       	ori	r24, 0x06	; 6
  8e:	85 b9       	out	0x05, r24	; 5


int main(void)
{
	
	uint16_t run = 1;
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	90 e0       	ldi	r25, 0x00	; 0
	PORTB |= (1 << PORTB1) | (1 << PORTB2);
	
	while (1)
	{
		
		if((PINB & (1 << PINB1)) == 0){
  94:	19 99       	sbic	0x03, 1	; 3
  96:	11 c0       	rjmp	.+34     	; 0xba <main+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	34 e3       	ldi	r19, 0x34	; 52
  9c:	4c e0       	ldi	r20, 0x0C	; 12
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	30 40       	sbci	r19, 0x00	; 0
  a2:	40 40       	sbci	r20, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <main+0x1e>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x28>
  a8:	00 00       	nop
			_delay_ms(250);
			if(run >= 0x80){
  aa:	80 38       	cpi	r24, 0x80	; 128
  ac:	91 05       	cpc	r25, r1
  ae:	18 f4       	brcc	.+6      	; 0xb6 <main+0x36>
				run = 1;
			}
			else{
				run *= 2;
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	02 c0       	rjmp	.+4      	; 0xba <main+0x3a>
	{
		
		if((PINB & (1 << PINB1)) == 0){
			_delay_ms(250);
			if(run >= 0x80){
				run = 1;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
			else{
				run *= 2;
			}
		}
		
		if((PINB & (1 << PINB2)) == 0){
  ba:	1a 99       	sbic	0x03, 2	; 3
  bc:	11 c0       	rjmp	.+34     	; 0xe0 <main+0x60>
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	34 e3       	ldi	r19, 0x34	; 52
  c2:	4c e0       	ldi	r20, 0x0C	; 12
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	30 40       	sbci	r19, 0x00	; 0
  c8:	40 40       	sbci	r20, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x44>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x4e>
  ce:	00 00       	nop
			_delay_ms(250);
			if(run <= 1){
  d0:	82 30       	cpi	r24, 0x02	; 2
  d2:	91 05       	cpc	r25, r1
  d4:	18 f0       	brcs	.+6      	; 0xdc <main+0x5c>
				run = 0x80;
			}
			else{
				run /= 2;
  d6:	96 95       	lsr	r25
  d8:	87 95       	ror	r24
  da:	02 c0       	rjmp	.+4      	; 0xe0 <main+0x60>
		}
		
		if((PINB & (1 << PINB2)) == 0){
			_delay_ms(250);
			if(run <= 1){
				run = 0x80;
  dc:	80 e8       	ldi	r24, 0x80	; 128
  de:	90 e0       	ldi	r25, 0x00	; 0
				run /= 2;
			}
		}


		PORTD = run; // bit 7 off 0b00000000
  e0:	8b b9       	out	0x0b, r24	; 11

	}
  e2:	d8 cf       	rjmp	.-80     	; 0x94 <main+0x14>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
